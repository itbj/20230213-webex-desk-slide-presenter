
' This VB macro is found in the PowerPoint TemplateDeskProMacro_ver0.1.x.pptm, but wanted to include a copy here.  
' I recommend using TemplateDeskProMacro_ver0.1.x.pptm to start with instead of the below Macro


Private Sub sendCommand(position As String)
    Dim curlString, userame, password, ipaddress, body As String
    
    ' Change the following three values to match your Webex Desk Pro
    username = "pptMacro"
    password = ""
    ipaddress = "192.168.x.x"
    
    
    body = "<Command><UserInterface><Message><TextInput><Response><FeedbackId>pptVideoSquare</FeedbackId><Text>" + position + "</Text></Response></TextInput></Message></UserInterface></Command>"
    curlString = "curl -k -u """ + username + ":" + password + """ -d """ + body + """ https://" + ipaddress + "/putxml"
    SetLastCommand (position)
    Shell (curlString)
    
End Sub

Sub OnSlideShowPageChange()
    Dim shownSlide As Integer
    
    If SlideShowWindows.Count > 0 Then
        shownSlide = ActivePresentation.SlideShowWindow.View.CurrentShowPosition
        LoopThroughShapes (shownSlide)
    End If
    
    Debug.Print "The Time:"
    Debug.Print GetTime
    
End Sub

Sub OnSlideShowTerminate()
     sendCommand ("pptImmersiveSlideShowEnd")
     SetLastCommand ("SlideShowEnd")
End Sub

Private Sub LoopThroughShapes(slideNumber)
    Dim currentSlide As Slide
    Dim shp As Shape
    Dim shapeFound As Boolean
    
    shapeFound = False

    Set currentSlide = ActivePresentation.SlideShowWindow.View.Slide

      For Each shp In currentSlide.Shapes
          If LCase(shp.Name) Like "videosquare*" Then
             GetShapeDetails shp
             shapeFound = True
             Exit For
          End If
          
          If LCase(shp.Name) Like "cameraonly" Then
            sendCommand ("pptImmersiveCameraOnly")
            shapeFound = True
            Exit For
          End If
      Next shp
      
      If shapeFound = False Then
        If Not GetLastCommand() = "pptImmersiveShareOff" Then
            sendCommand ("pptImmersiveShareOff")
        End If
      End If
End Sub




Private Sub GetShapeDetails(shp As Shape)
     Dim shapeDetails, pythonPath, Composition, lastShapeDetails As String
     Dim shpX, shpY, shpScale, shpOpacity, tempOpacity, slideWidth, slideHeight As Integer
     Dim arrSplitString() As String
     Dim Item As Variant
     
     Composition = "Blend"
     shpOpacity = 100
     
     arrSplitString = Split(LCase(shp.Name), "_")
     
      For Each Item In arrSplitString
            Debug.Print ("****** Item: " + Item)
            
            If Item = "blend" Then
                Composition = "Blend"
            ElseIf Item = "pip" Then
                Composition = "CameraPip"
            ElseIf Item = "camerapip" Then
                Composition = "CameraPip"
            ElseIf Item = "videopip" Then
                Composition = "VideoPip"
            ElseIf Item = "flippip" Then
              Composition = "VideoPip"
            ElseIf IsNumeric(Item) Then
                tempOpacity = CInt(Item)
                If tempOpacity >= 0 And tempOpacity <= 100 Then
                    shpOpacity = Item
                End If
            Else
               ' Composition = "Blend"
            End If
            
      Next Item
     
      
      
        
      slideWidth = CDbl(ActivePresentation.PageSetup.slideWidth)
      slideHeight = CDbl(ActivePresentation.PageSetup.slideHeight)
    
      shpX = CInt((shp.Left + shp.Width / 2) * 10000 / slideWidth)
     
      shpY = CInt((shp.Top + shp.Height / 2) * 10000 / slideHeight)
     
      shpScale = CInt(100 * ((shp.Height / slideHeight) + (shp.Width / slideWidth)) / 2)
         
     ' Debug.Print ("Raw: X:" + shp.Left + ",Y:" + shp.Top)
     
     shapeDetails = "X:" + Trim(Str(shpX)) + ",Y:" + Trim(Str(shpY)) + ",Scale:" + Trim(Str(shpScale)) + ",Opacity:" + Trim(Str(shpOpacity)) + ",Composition:" + Trim(Composition)
     
     Debug.Print (shapeDetails)
     lastShapeDetails = GetLastCommand()
     If Not (lastShapeDetails = shapeDetails) Then
         lastShapeDetails = shapeDetails
         sendCommand (shapeDetails)
     End If
     Debug.Print (GetTime)
End Sub

Private Function GetTime() As String
    GetTime = Format(Now(), "yyyy-MM-dd hh:mm:ss")
End Function

Private Sub SetLastCommand(command As String)
    With Application.ActivePresentation.Tags
        .Add "LASTCOMMAND", command
    End With
End Sub

Private Function GetLastCommand() As String
        GetLastCommand = "none"
        With Application.ActivePresentation.Tags
                For i = 1 To .Count
                    Debug.Print ("tags: " + .Name(i) + ": " + .Value(i))
                    If .Name(i) = "LASTCOMMAND" Then
                        GetLastCommand = .Value(i)
                    End If
                Next
            End With
End Function

Private Sub App_SlideShowBegin(ByVal Wn As SlideShowWindow)

   MsgBox ("Test")

End Sub
