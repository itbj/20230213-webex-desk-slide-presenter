' This VB macro is found in the PowerPoint TemplateDeskProMacro_ver0.1.x.pptm, but wanted to include a copy here.  
' I recommend using TemplateDeskProMacro_ver0.1.x.pptm to start with instead of the below Macro

' Webex Desk Slide Presenter VBA macro ver 0.1.5.5
' Author = "joehughe" + "@" + "cisco" + ".com"
' https://github.com/vtjoeh/webex-desk-slide-presenter

Public rib As IRibbonUI

Private Sub SendCommand(command As String)
    Dim curlString, username, password, ipaddress, body, lastCommand, feedbackId As String
    
    lastCommand = GetTag("LASTCOMMAND")
    
    feedbackId = GetMainVideoStreamDual          ' feedbackId = 'pptVideoSquare' or feedbacakId 'pptVideoSquareDual'.  pptVideoSquareDual mirrors the main channel and content channel

    If Not (lastCommand = command) Then
        username = Trim(GetShapeTextValue("setting_user"))
        password = Trim(GetShapeTextValue("setting_pwd"))
        ipaddress = Trim(GetShapeTextValue("setting_ip"))
        
        ' supported Password characters A-Z a-z 0-9 and `~!@#\$%^&*()_+-={}|[]\:";'?,./
        ' Explicitly not supported:  < >
        If InStr(password, "<") Or InStr(password, ">") Then
            MsgBox ("Webex Desk Slide Presenter - Invalid Password:  Characters < and > are not supported in the password.")
            Exit Sub
        End If
               
        #If Mac Then
            password = Replace(password, "\", "\\")
            password = Replace(password, "$", "\$")
            password = Replace(password, "`", "\`")
        #Else
            ' Run on PC
        #End If
    
        password = Replace(password, """", "\""")
        
        body = "<Command><UserInterface><Message><TextInput><Response><FeedbackId>" + feedbackId + "</FeedbackId><Text>" + command + "</Text></Response></TextInput></Message></UserInterface></Command>"

        curlString = "curl -k -d """ + body + """ https://" + ipaddress + "/putxml -u """ + username + ":" + password + """"

        Debug.Print (GetTime + " Command: " + command)
        StoreTag "LASTCOMMAND", (command)
        
        Shell (curlString)

    End If
End Sub

Private Function GetMainVideoStreamDual() As String
    Dim feedbackId, mainVideoStream As String
    
    mainVideoStream = Trim(LCase(GetShapeTextValue("setting_default_main_video_stream")))

    If (mainVideoStream = "mirror") Then
        feedbackId = "pptVideoSquareDual"   ' This is equal to 'Mirror'
    Else
        feedbackId = "pptVideoSquare"   ' This is equal to 'Mute'  the default setting
    End If

    GetMainVideoStreamDual = feedbackId
End Function

Private Sub MakePasswordTransparent()
    Dim i As Integer
    Dim currentSlide As slide
    Dim shp As shape
    Dim done As Boolean
    
    done = False
    
    For i = 1 To ActivePresentation.Slides.Count
        Set currentSlide = ActivePresentation.Slides(i)
        For Each shp In currentSlide.Shapes
        
            If shp.Name = "setting_pwd" Then
                shp.TextFrame2.TextRange.Font.Fill.Transparency = 1#
                Exit For
            End If
         Next
         If done Then Exit For
    Next
End Sub

Private Function GetShapeTextValue(shapeName As String) As String
    Dim i As Integer
    Dim passwordVisible As String
    Dim currentSlide As slide
    Dim shp As shape
    Dim done As Boolean
    
    GetShapeTextValue = "not found"
    done = False
    
    For i = 1 To ActivePresentation.Slides.Count
        Set currentSlide = ActivePresentation.Slides(i)
        For Each shp In currentSlide.Shapes
            If shp.Name = "setting_pwd" And GetTag("PASSWORDVISIBLE") = "false" Then
                shp.TextFrame2.TextRange.Font.Fill.Transparency = 1#
            End If
            
            If LCase(shp.Name) = shapeName Then
                GetShapeTextValue = Trim(ActivePresentation.Slides(i).Shapes(shapeName).TextFrame.TextRange.Text)
                done = True
                Exit For
            End If
         Next
         If done Then Exit For
    Next
End Function

Public Sub ToggleSelfviewOn()
    SendCommand ("pptImmersiveSelfviewToggle")
    OnSlideShowPageChange
End Sub

' Toggle the visibility of the password on or off
Public Sub MakePasswordVisible()
    If ActivePresentation.SlideShowWindow.View.slide.Shapes("setting_pwd").TextFrame2.TextRange.Font.Fill.Transparency = 0# Then
        ActivePresentation.SlideShowWindow.View.slide.Shapes("setting_pwd").TextFrame2.TextRange.Font.Fill.Transparency = 1#
        StoreTag "PASSWORDVISIBLE", ("false")
    Else
        ActivePresentation.SlideShowWindow.View.slide.Shapes("setting_pwd").TextFrame2.TextRange.Font.Fill.Transparency = 0#
        StoreTag "PASSWORDVISIBLE", ("true")
    End If
End Sub

Sub OnSlideShowPageChange()
    Dim shownSlide As Integer
    
    If SlideShowWindows.Count > 0 Then
        shownSlide = ActivePresentation.SlideShowWindow.View.CurrentShowPosition
        LoopThroughShapes (shownSlide)
    End If
End Sub

Sub OnSlideShowTerminate()
    Dim command As String
    
    command = GetShapeTextValue("setting_default_slide_show_end")
    command = LCase(command)
    command = Replace(command, " ", "")
    
    If command Like "showpc*" Then
        command = "pptImmersiveSlideShowEnd"
    ElseIf command = "stopcontentshare" Then
        command = "pptImmersiveStopContentShare"
    ElseIf Not (command Like "nothing") Then
        command = "pptImmersiveStopContentShare"
    End If
    
    If Not (command = "nothing") Then
            SendCommand (command)
    End If
    
    StoreTag "LASTCOMMAND", ("SlideShowEnd")
    StoreTag "PASSWORDVISIBLE", ("false")
End Sub

Private Sub LoopThroughShapes(slideNumber)
    Dim currentSlide As slide
    Dim shp As shape
    Dim strEqual, shpName, defaultNoCommand As String
    Dim shapeFound As Boolean
    
    shapeFound = False
    Set currentSlide = ActivePresentation.Slides(slideNumber)

    For Each shp In currentSlide.Shapes
        shpName = LCase(shp.Name)

        If shpName Like "videosquare*" Or shpName Like "videoshape*" Then
            GetShapeDetails shp
            shapeFound = True
            Exit For
        ElseIf shpName = "stopcontentshare" Then
            SendCommand ("pptImmersiveStopContentShare")
            StoreTag "LASTCOMMAND", ("SlideShowEnd")
            shapeFound = True
            Exit For
        ElseIf shpName = "novideo" Or shpName = "contentonly" Then
            SendCommandNoVideo
            shapeFound = True
            Exit For
        ElseIf shpName = "cameraonly" Then
            SendCommand ("pptImmersiveCameraOnly")
            shapeFound = True
            Exit For
        ElseIf shpName Like "sidebyside*" Then
            strEqual = Replace(shpName, "sidebyside", "")
            strEqual = Replace(strEqual, "x", "0")
            SendCommand ("pptImmersiveEqual" + strEqual)
            shapeFound = True
            Exit For
        ElseIf shpName = "prominent" Then
            SendCommand ("pptImmersiveProminent")
            shapeFound = True
            Exit For
        ElseIf shpName = "stopimmersiveshare" Then
            SendCommand ("pptImmersiveShareOff")
            shapeFound = True
            Exit For
        ElseIf shpName Like "previous*" Then
            shapeFound = True
            PreviousSlideCommand (CLng(slideNumber))
            Exit For
        ElseIf shpName Like "speakertrackdiagnostic*" Then
            SendCommand ("pptImmersiveSpeakerTrackDiag")
            shapeFound = True
            Exit For
        End If
    Next shp

    ' If a command shape is not found determine default action
    If shapeFound = False Then
       GetDefaultSlideCommand (slideNumber)
    End If
End Sub

Private Sub SendCommandNoVideo()
    SendCommand ("X:200,Y:200,Scale:1,Opacity:1,Composition:Blend")
End Sub

Private Sub GetDefaultSlideCommand(slideNumber)
    Dim command As String
    command = GetShapeTextValue("setting_default_no_command")
   
    ' First parse the command so it is either a number, 'previous' or 'default'.
    command = Replace(command, " ", "") ' remove all spaces
    command = LCase(command)
    command = Replace(command, "slide", "")
    command = Replace(command, "number", "")
   ' Make sure the value is valid.  If not change to 'default'
    If IsNumeric(command) = True Then
        If Not (CLng(command) <= ActivePresentation.Slides.Count And CLng(command) > 0) Then
            command = "default"
        End If
    ElseIf Not (command = "novideo" Or command = "contentonly" Or command = "previous" Or command = "stopimmersiveshare") Then
        command = "default"
    End If
 
    If command = "novideo" Or command = "contentonly" Or command = "default" Then
        SendCommandNoVideo
    ElseIf command = "stopimmersiveshare" Then
        SendCommand ("pptImmersiveShareOff")
    ElseIf IsNumeric(command) Then
        ' do something with the slide designated as the default slide.
        LoopThroughShapes (CLng(command))
    ElseIf command = "previous" Then '  uses the command from the previous slide.
        PreviousSlideCommand (slideNumber)
    End If
End Sub

Private Sub PreviousSlideCommand(slideNumber As Long)
        If slideNumber > 1 Then
            slideNumber = slideNumber - 1
            LoopThroughShapes (slideNumber)
        Else  ' If there is no previous command, turn off immersive share
            SendCommand ("pptImmersiveShareOff")
        End If
End Sub

Private Sub GetShapeDetails(shp As shape)
    Dim shapeDetails, pythonPath, Composition, lastShapeDetails As String
    Dim shpX, shpY, shpScale, shpOpacity, tempOpacity, slideWidth, slideHeight As Integer
    Dim arrSplitString() As String
    Dim Item As Variant
    
    Composition = "Blend"
    shpOpacity = 100
    
    arrSplitString = Split(LCase(shp.Name), "_")
     
    For Each Item In arrSplitString
        If Item = "blend" Then
            Composition = "Blend"
        ElseIf Item = "pip" Then
            Composition = "CameraPip"
        ElseIf Item = "camerapip" Then
            Composition = "CameraPip"
        ElseIf Item = "videopip" Then
            Composition = "VideoPip"
        ElseIf Item = "flippip" Then
            Composition = "VideoPip"
        ElseIf IsNumeric(Item) Then
            tempOpacity = CInt(Item)
            If tempOpacity >= 0 And tempOpacity <= 100 Then
                shpOpacity = Item
            End If
        End If
    Next Item
    ' Convert coordinates and size of VideoSquare for the Webex Desk
    slideWidth = CDbl(ActivePresentation.PageSetup.slideWidth)
    slideHeight = CDbl(ActivePresentation.PageSetup.slideHeight)
    shpX = CInt((shp.Left + shp.Width / 2) * 10000 / slideWidth)
    shpY = CInt((shp.Top + shp.Height / 2) * 10000 / slideHeight)
    shpScale = CInt(100 * ((shp.Height / slideHeight) + (shp.Width / slideWidth)) / 2)
    shapeDetails = "X:" + Trim(Str(shpX)) + ",Y:" + Trim(Str(shpY)) + ",Scale:" + Trim(Str(shpScale)) + ",Opacity:" + Trim(Str(shpOpacity)) + ",Composition:" + Trim(Composition)
    lastShapeDetails = GetTag("LASTCOMMAND")

    SendCommand (shapeDetails)
End Sub

Private Function GetTime() As String
    GetTime = Format(Now(), "yyyy-MM-dd hh:mm:ss")
End Function

Private Sub StoreTag(tagName As String, tagValue As String)
    With Application.ActivePresentation.Tags
        .Add tagName, tagValue
    End With
End Sub

Private Function GetTag(tagName As String) As String
    GetTag = tagName + " not found"
    With Application.ActivePresentation.Tags
        For i = 1 To .Count
            If .Name(i) = tagName Then
                GetTag = .Value(i)
            End If
        Next
    End With
End Function

' *
' *  The following command support the Ribbon on the PC only
' *

'Callback for customUI.onLoad
Sub RibbonOnLoad(ribbon As IRibbonUI)
    ' Set rib = ribbon
    ' rib.Invalidate
    ' rib.ActivateTab ("tabWebexDeskTab")
End Sub

' Webex Desk tab is invisible by default.  Make visibile for the PC, does nothing on the Mac
Sub GetVisible(control As IRibbonControl, ByRef visible)
     visible = True
End Sub

' Callback from Ribbonx onAction
Sub InsertVideoSquare(control As IRibbonControl)
    Dim arrayShapes
    Dim strShpNames As String
    Dim shpNumber As Integer
        
    arrayShapes = ArrayOfShapesOnSlide
    shpNumber = UBound(arrayShapes)
    
    If shpNumber = -1 Then ' No shape on screen
        InsertRectangle (control.Id)
    ElseIf shpNumber = 0 Then ' 1 VideoSquare on Screen.  Update the name if videosquare* or delete and recreate
        strShpNames = Trim(Join(arrayShapes))
        If LCase(strShpNames) Like "videosquare*" Or LCase(strShpNames) Like "videoshape*" Then
            UpdateVideoSquareName (control.Id)
        Else
            DeleteOldInsertNewSquare (control.Id)
        End If
    Else  ' 2 or more shapes already on the screen.
        strShpNames = Join(arrayShapes, vbNewLine & "¥  ")
        strShpNames = vbNewLine & "¥  " + strShpNames
        MsgBox "Multiple VideoSquare or similar command shapes on this slide.  Only 1 is allowed per a slide. Curent shapes: " + strShpNames + vbNewLine + vbNewLine + "Please delete some VideoSquares.", Title:="Insert VideoSquare"
    End If
End Sub

Sub DeleteOldInsertNewSquare(newSquare As String, Optional ByVal offScreen As Boolean = False)
    Dim shape As shape
    Dim sld As slide
    Dim i As Integer
    Dim done As Boolean
    Dim arrNames
    
    arrNames = Array("videosquare*", "cameraonly", "contentonly", "novideo", "sidebyside*", "prominent*", "stopimmersiveshare", "stopcontentshare", "speakertrackdiagnostic*", "previous*")
    
    done = False
    Set sld = Application.ActiveWindow.View.slide
    
    ' Deletes 1 shape only and break loop
    For Each shape In sld.Shapes
        For i = LBound(arrNames) To UBound(arrNames)
            If Trim(LCase(shape.Name)) Like arrNames(i) Then
                shape.Delete
                done = True
                Exit For
            End If
        Next
        If done Then Exit For
    Next shape
    
    If offScreen = False Then
        InsertRectangle (newSquare)
    Else
        InsertRectangleOffScreen (newSquare)
    End If
End Sub

Sub UpdateVideoSquareName(newName As String)
    Dim shp As shape
    Dim currentSlide As slide
    
    Set currentSlide = Application.ActiveWindow.View.slide
    
    For Each shp In currentSlide.Shapes
        If Trim(LCase(shp.Name)) Like "videosquare*" Or Trim(LCase(shp.Name)) Like "videoshape*" Then
            shp.Name = newName
        End If
    Next
End Sub

' Callback from Ribbonx onAction
Sub InsertSquareOffScreen(control As IRibbonControl)
    Dim arrayShapes
    Dim strShpNames As String
    Dim shpNumber As Integer
        
    arrayShapes = ArrayOfShapesOnSlide
    shpNumber = UBound(arrayShapes)
    
    If shpNumber = -1 Then
        InsertRectangleOffScreen (control.Id)
    ElseIf shpNumber = 0 Then
        DeleteOldInsertNewSquare control.Id, offScreen:=True
    Else
        strShpNames = Join(arrayShapes, vbNewLine & "¥  ")
        strShpNames = vbNewLine & "¥  " + strShpNames
        MsgBox "Multiple VideoSquare or similar command shapes on this slide.  Only 1 is allowed per a slide. Curent shapes: " + strShpNames + vbNewLine + vbNewLine + "Please delete some VideoSquares.", Title:="Insert VideoSquare"
    End If
End Sub

'Callback for ToggleShapeTransparent onAction
Sub ToggleShapeTransparent(control As IRibbonControl)
    Dim arrayShapes
    Dim strShpNames As String
    Dim shpNumber As Integer
    Dim shp As shape
    Dim currentSlide As slide
    arrayShapes = ArrayOfShapesOnSlide
    shpNumber = UBound(arrayShapes)

    If shpNumber = 0 Then
        strShpNames = Join(arrayShapes)
        Set currentSlide = Application.ActiveWindow.View.slide
        For Each shp In currentSlide.Shapes
            If shp.Name = strShpNames Then
                If (shp.visible = False) Then
                    shp.visible = True
                Else
                    shp.visible = False
                End If
            End If
        Next
    ElseIf shpNumber = -1 Then
        MsgBox "No VideoSquare or similar shape found on this slide to toggle visible.", Title:="Toggle Visibile"
    Else
        strShpNames = Join(arrayShapes, vbNewLine & "¥  ")
        strShpNames = vbNewLine & "¥  " + strShpNames
        MsgBox "Multiple VideoSquare or similar command shapes on this slide.  Only 1 is allowed per a slide. Curent shapes: " + strShpNames + vbNewLine + vbNewLine + "Please delete some VideoSquares.", Title:="Toggle Visible"
    End If
End Sub

'Callback for TogglePasswordVisible onAction
Sub TogglePasswordVisible(control As IRibbonControl)
    Dim currentSlide As slide
    Dim shp As shape
    Dim found As Boolean
    
    found = False
    
    Set currentSlide = Application.ActiveWindow.View.slide
    For Each shp In currentSlide.Shapes
        If shp.Name = "setting_pwd" Then
                If (shp.TextFrame2.TextRange.Font.Fill.Transparency = 1#) Then
                    shp.TextFrame2.TextRange.Font.Fill.Transparency = 0#
                Else
                    shp.TextFrame2.TextRange.Font.Fill.Transparency = 1#
                End If
                found = True
        End If
    Next
    
    If found = False Then
        MsgBox ("No password shape 'setting_pwd' found on current slide")
    End If
End Sub


Sub TypeOfVideoSquare(control As IRibbonControl)
    Dim arrayShapes
    Dim strShpNames As String
    Dim shpNumber As Integer
        
    arrayShapes = ArrayOfShapesOnSlide
    shpNumber = UBound(arrayShapes)

    strShpNames = Join(arrayShapes, vbNewLine & "¥  ")
    strShpNames = vbNewLine & "¥  " + strShpNames
    
    If shpNumber = 0 Then
        MsgBox "Shape Name: " + strShpNames, Title:="Type of Video Square"
    ElseIf shpNumber = -1 Then
        MsgBox "No VideoSquare shapes found on this slide", Title:="Type of Video Square"
    Else
        MsgBox "Multiple VideoSquare command shapes on this slide.  Only 1 is allowed per a slide. Curent shapes: " + strShpNames + vbNewLine + vbNewLine + "Please delete some VideoSquares.", Title:="Type of Video Square"
    End If
End Sub

Function ArrayOfShapesOnSlide() As Variant
    Dim shape As shape
    Dim sld As slide
    Dim i As Integer
    Dim strShapeList As String
    Dim foundVideoSquares
    Dim arrNames
    
    arrNames = Array("videosquare*", "videoshape*", "cameraonly", "contentonly", "novideo", "sidebyside*", "prominent*", "stopimmersiveshare", "stopcontentshare", "speakertrackdiagnostic*", "previous*")
    foundVideoSquares = False

    Set sld = Application.ActiveWindow.View.slide
    
    For Each shape In sld.Shapes
        For i = LBound(arrNames) To UBound(arrNames)
            If Trim(LCase(shape.Name)) Like arrNames(i) Then
                strShapeList = strShapeList + Trim(shape.Name) + ";"
            End If
        Next
    Next shape
    
    If (Len(strShapeList) > 0) Then ' Remove trailing semi-colon;
        strShapeList = Left(strShapeList, Len(strShapeList) - 1)
    End If
    
    ' Return ArrayOfShapesOnSlide
    ArrayOfShapesOnSlide = Split(strShapeList, ";")
End Function


Private Sub InsertRectangle(ByVal shpName As String, Optional ByVal shpText As String = "")
    Dim slideWidth, slideHeight As Double
    Dim shpWidth, shpHeight, shpLeft, shpTop, shpScale As Integer
    Dim oSh As shape
    
    ' Insert the shape in the center of the screen at specified scale:
    shpScale = 50 ' Percent of height and width slide will be on screen
    
    slideWidth = CDbl(ActivePresentation.PageSetup.slideWidth)
    slideHeight = CDbl(ActivePresentation.PageSetup.slideHeight)
    
    shpWidth = CInt(slideWidth * shpScale / 100)
    shpHeight = CInt(shpWidth * 9 / 16) ' Make sure it is a 16:9 rectangle.
    
    shpLeft = CInt((slideWidth - shpWidth) / 2)
    shpTop = CInt((slideHeight - shpHeight) / 2)
    
    Set oSh = ActiveWindow.Selection.SlideRange.Shapes.AddShape(msoShapeRectangle, shpLeft, shpTop, shpWidth, shpHeight)

    With oSh
    .Name = shpName
    .LockAspectRatio = msoTrue
        With .TextFrame.TextRange
            .Text = shpText
            With .Font
               ' .Name = "Arial"
               ' .Size = 18
                .Bold = msoFalse
                .Italic = msoFalse
                .Underline = msoFalse
                .Shadow = msoFalse
                .Emboss = msoFalse
                .BaselineOffset = 0
                .AutoRotateNumbers = msoFalse
              '  .Color.SchemeColor = ppForeground
            End With   ' Font
        End With   ' TextRange
    End With   ' oSh, the shape itself
End Sub

Sub InsertRectangleOffScreen(ByVal shpName As String, Optional ByVal shpText As String = "")
    Dim slideWidth, slideHeight As Double
    Dim shpWidth, shpHeight, shpLeft, shpTop, shpScale As Integer
    Dim oSh As shape
    
    ' Insert the shape in the center of the screen at specified scale:
    shpScale = 35 ' Percent of width shape will compared slide width
    
    slideWidth = CDbl(ActivePresentation.PageSetup.slideWidth)
    slideHeight = CDbl(ActivePresentation.PageSetup.slideHeight)
    
    shpWidth = CInt(slideWidth * shpScale / 100)
    shpHeight = CInt(shpWidth * 1 / 10)
    
    shpLeft = CInt(slideWidth * 0.05) ' add a little buffer so the shape is fully offscreen
    shpTop = CInt(slideHeight * 1.005)
    
    Set oSh = ActiveWindow.Selection.SlideRange.Shapes.AddShape(msoShapeRoundedRectangle, shpLeft, shpTop, shpWidth, shpHeight)
    
    shpText = shpName
    
    With oSh
    .Name = shpName
    .LockAspectRatio = msoTrue
    .Line.visible = msoTrue
        With .TextFrame.TextRange
            .Text = shpText
            With .Font
              '  .Name = "Arial"
              '  .Size = 18
                .Bold = msoFalse
                .Italic = msoFalse
                .Underline = msoFalse
                .Shadow = msoFalse
                .Emboss = msoFalse
                .BaselineOffset = 0
                .AutoRotateNumbers = msoFalse
               '  .Color.SchemeColor = ppForeground
            End With   ' Font
        End With   ' TextRange
    End With   ' oSh, the shape itself

End Sub
