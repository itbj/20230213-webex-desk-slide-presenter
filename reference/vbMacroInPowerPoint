' This VB macro is found in the PowerPoint TemplateDeskProMacro_ver0.1.x.pptm, but wanted to include a copy here.  
' I recommend using TemplateDeskProMacro_ver0.1.x.pptm to start with instead of the below Macro

' Webex Desk Slide Presenter VBA macro ver 0.1.5.3
' Author: joehughe at cisco dot com
' https://github.com/vtjoeh/webex-desk-slide-presenter

Private Sub SendCommand(command As String)
    Dim curlString, username, password, ipaddress, body, lastCommand As String
    
    lastCommand = GetTag("LASTCOMMAND")

    If Not (lastCommand = command) Then
        username = GetShapeTextValue("setting_user")
        password = GetShapeTextValue("setting_pwd")
        ipaddress = GetShapeTextValue("setting_ip")
    
        body = "<Command><UserInterface><Message><TextInput><Response><FeedbackId>pptVideoSquare</FeedbackId><Text>" + command + "</Text></Response></TextInput></Message></UserInterface></Command>"
        curlString = "curl -k -u """ + username + ":" + password + """ -d """ + body + """ https://" + ipaddress + "/putxml"
        Debug.Print (GetTime + " Command: " + command)
        StoreTag "LASTCOMMAND", (command)
        Shell (curlString)
    End If
End Sub

Private Sub MakePasswordTransparent()
    Dim i As Integer
    Dim currentSlide As Slide
    Dim shp As Shape
    Dim done As Boolean
    
    done = False
    
    For i = 1 To ActivePresentation.Slides.Count
        Set currentSlide = ActivePresentation.Slides(i)
        For Each shp In currentSlide.Shapes
        
            If shp.Name = "setting_pwd" Then
                shp.TextFrame2.TextRange.Font.Fill.transparency = 1#
                Exit For
            End If
         Next
         If done Then Exit For
    Next
End Sub

Private Function GetShapeTextValue(shapeName As String) As String
    Dim i As Integer
    Dim passwordVisible As String
    Dim currentSlide As Slide
    Dim shp As Shape
    Dim done As Boolean
    
    GetShapeTextValue = "not found"
    done = False
    
    For i = 1 To ActivePresentation.Slides.Count
        Set currentSlide = ActivePresentation.Slides(i)
        For Each shp In currentSlide.Shapes
            If shp.Name = "setting_pwd" And GetTag("PASSWORDVISIBLE") = "false" Then
                shp.TextFrame2.TextRange.Font.Fill.transparency = 1#
            End If
            
            If LCase(shp.Name) = shapeName Then
                GetShapeTextValue = Trim(ActivePresentation.Slides(i).Shapes(shapeName).TextFrame.TextRange.text)
                done = True
                Exit For
            End If
         Next
         If done Then Exit For
    Next
End Function

Public Sub ToggleSelfviewOn()
    SendCommand ("pptImmersiveSelfviewToggle")
    OnSlideShowPageChange
End Sub

Public Sub MakePasswordVisible()
   ' Toggle the visibility of the password on or off
    If ActivePresentation.SlideShowWindow.View.Slide.Shapes("setting_pwd").TextFrame2.TextRange.Font.Fill.transparency = 0# Then
        ActivePresentation.SlideShowWindow.View.Slide.Shapes("setting_pwd").TextFrame2.TextRange.Font.Fill.transparency = 1#
        StoreTag "PASSWORDVISIBLE", ("false")
    Else
        ActivePresentation.SlideShowWindow.View.Slide.Shapes("setting_pwd").TextFrame2.TextRange.Font.Fill.transparency = 0#
        StoreTag "PASSWORDVISIBLE", ("true")
    End If
End Sub

Sub OnSlideShowPageChange()
    Dim shownSlide As Integer
    
    If SlideShowWindows.Count > 0 Then
        shownSlide = ActivePresentation.SlideShowWindow.View.CurrentShowPosition
        LoopThroughShapes (shownSlide)
    End If
End Sub

Sub OnSlideShowTerminate()
    Dim command As String
    
    command = GetShapeTextValue("setting_default_slide_show_end")
    command = LCase(command)
    command = Replace(command, " ", "")
    
    If command Like "showpc*" Then
        command = "pptImmersiveSlideShowEnd"
    ElseIf command = "stopcontentshare" Then
        command = "pptImmersiveStopContentShare"
    ElseIf Not (command Like "nothing") Then
        command = "pptImmersiveStopContentShare"
    End If
    
    If Not (command = "nothing") Then
            SendCommand (command)
    End If
    
    StoreTag "LASTCOMMAND", ("SlideShowEnd")
    StoreTag "PASSWORDVISIBLE", ("false")
End Sub

Private Sub LoopThroughShapes(slideNumber)
    Dim currentSlide As Slide
    Dim shp As Shape
    Dim strEqual, shpName, defaultNoCommand As String
    Dim shapeFound As Boolean
    
    shapeFound = False
    Set currentSlide = ActivePresentation.Slides(slideNumber)
     
    For Each shp In currentSlide.Shapes
        shpName = LCase(shp.Name)
        If shpName Like "videosquare*" Or shpName Like "videoshape*" Then
            GetShapeDetails shp
            shapeFound = True
            Exit For
        ElseIf shpName = "stopcontentshare" Then
            SendCommand ("pptImmersiveStopContentShare")
            StoreTag "LASTCOMMAND", ("SlideShowEnd")
            shapeFound = True
            Exit For
        ElseIf shpName = "novideo" Then
            SendCommandNoVideo
            shapeFound = True
            Exit For
        ElseIf shpName = "cameraonly" Then
            SendCommand ("pptImmersiveCameraOnly")
            shapeFound = True
            Exit For
        ElseIf shpName Like "sidebyside*" Then
            strEqual = Replace(shpName, "sidebyside", "")
            strEqual = Replace(strEqual, "x", "0")
            SendCommand ("pptImmersiveEqual" + strEqual)
            shapeFound = True
            Exit For
        ElseIf shpName = "prominent" Then
            SendCommand ("pptImmersiveProminent")
            shapeFound = True
            Exit For
        ElseIf shpName = "stopimmersiveshare" Then
            SendCommand ("pptImmersiveShareOff")
            shapeFound = True
            Exit For
        ElseIf shpName Like "previous*" Then
            shapeFound = True
            PreviousSlideCommand (CLng(slideNumber))
            Exit For
        ElseIf shpName = "speakertrackdiagnostic" Then
            SendCommand ("pptImmersiveSpeakerTrackDiag")
            shapeFound = True
            Exit For
        End If
    Next shp
    
    ' If a command shape is not found determine default action
    If shapeFound = False Then
       GetDefaultSlideCommand (slideNumber)
    End If
End Sub

Private Sub SendCommandNoVideo()
    SendCommand ("X:200,Y:200,Scale:1,Opacity:1,Composition:Blend")
End Sub

Private Sub GetDefaultSlideCommand(slideNumber)
    Dim command As String
    command = GetShapeTextValue("setting_default_no_command")
   
    ' First parse the command so it is either a number, 'previous' or 'default'.
    command = Replace(command, " ", "") ' remove all spaces
    command = LCase(command)
    command = Replace(command, "slide", "")
    command = Replace(command, "number", "")
   ' Make sure the value is valid.  If not change to 'default'
    If IsNumeric(command) = True Then
        If Not (CLng(command) <= ActivePresentation.Slides.Count And CLng(command) > 0) Then
            command = "default"
        End If
    ElseIf Not (command = "novideo" Or command = "previous" Or command = "novideo" Or command = "stopimmersiveshare") Then
        command = "default"
    End If
 
    If command = "novideo" Or command = "default" Then
        SendCommandNoVideo
    ElseIf command = "stopimmersiveshare" Then
        SendCommand ("pptImmersiveShareOff")
    ElseIf IsNumeric(command) Then
        ' do something with the slide designated as the default slide.
        LoopThroughShapes (CLng(command))
    ElseIf command = "previous" Then '  uses the command from the previous slide.
        PreviousSlideCommand (slideNumber)
    End If
End Sub

Private Sub PreviousSlideCommand(slideNumber As Long)
        If slideNumber > 1 Then
            slideNumber = slideNumber - 1
            LoopThroughShapes (slideNumber)
        Else  ' If there is no previous command, turn off immersive share
            SendCommand ("pptImmersiveShareOff")
        End If
End Sub

Private Sub GetShapeDetails(shp As Shape)
    Dim shapeDetails, pythonPath, Composition, lastShapeDetails As String
    Dim shpX, shpY, shpScale, shpOpacity, tempOpacity, slideWidth, slideHeight As Integer
    Dim arrSplitString() As String
    Dim Item As Variant
    
    Composition = "Blend"
    shpOpacity = 100
    
    arrSplitString = Split(LCase(shp.Name), "_")
     
    For Each Item In arrSplitString
        If Item = "blend" Then
            Composition = "Blend"
        ElseIf Item = "pip" Then
            Composition = "CameraPip"
        ElseIf Item = "camerapip" Then
            Composition = "CameraPip"
        ElseIf Item = "videopip" Then
            Composition = "VideoPip"
        ElseIf Item = "flippip" Then
            Composition = "VideoPip"
        ElseIf IsNumeric(Item) Then
            tempOpacity = CInt(Item)
            If tempOpacity >= 0 And tempOpacity <= 100 Then
                shpOpacity = Item
            End If
        End If
    Next Item

    slideWidth = CDbl(ActivePresentation.PageSetup.slideWidth)
    slideHeight = CDbl(ActivePresentation.PageSetup.slideHeight)
    shpX = CInt((shp.Left + shp.Width / 2) * 10000 / slideWidth)
    shpY = CInt((shp.Top + shp.Height / 2) * 10000 / slideHeight)
    shpScale = CInt(100 * ((shp.Height / slideHeight) + (shp.Width / slideWidth)) / 2)
    shapeDetails = "X:" + Trim(Str(shpX)) + ",Y:" + Trim(Str(shpY)) + ",Scale:" + Trim(Str(shpScale)) + ",Opacity:" + Trim(Str(shpOpacity)) + ",Composition:" + Trim(Composition)
    lastShapeDetails = GetTag("LASTCOMMAND")
    
    SendCommand (shapeDetails)
End Sub

Private Function GetTime() As String
    GetTime = Format(Now(), "yyyy-MM-dd hh:mm:ss")
End Function

Private Sub StoreTag(tagName As String, tagValue As String)
    With Application.ActivePresentation.Tags
        .Add tagName, tagValue
    End With
End Sub

Private Function GetTag(tagName As String) As String
    GetTag = tagName + " not found"
    With Application.ActivePresentation.Tags
        For i = 1 To .Count
            If .Name(i) = tagName Then
                GetTag = .Value(i)
            End If
        Next
    End With
End Function
